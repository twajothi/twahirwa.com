class TwahirwaOS {
    constructor() {
        this.data = {};
        this.windowManager = new WindowManager();
        this.terminal = new Terminal();
        this.matrixRain = new MatrixRain();
        this.konamiCode = [];
        this.konamiSequence = ['ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight', 'b', 'a'];
    }

    async init() {
        try {
            this.initializeLoadingScreen();
            
            await this.loadData();
            
            this.initDesktop();
            this.initTaskbar();
            this.bindEvents();
            
            this.matrixRain.start();
            
            window.windowManager = this.windowManager;
            window.terminal = this.terminal;
            window.matrixRain = this.matrixRain;
            
        } catch (error) {
            console.error('Initialization error:', error);
            this.initDesktop(); // Fallback initialization
        }
    }

    async loadData() {
        const dataFiles = ['profile', 'projects', 'skills', 'research', 'music', 'social'];
        
        for (const file of dataFiles) {
            try {
                const response = await fetch(`assets/data/${file}.json`);
                this.data[file] = await response.json();
            } catch (error) {
                console.error(`Error loading ${file}.json:`, error);
                this.data[file] = {}; // Fallback to empty object
            }
        }
        
        // Update hardcoded social links after loading data
        this.updateDynamicContent();
    }

    updateDynamicContent() {
        // Load from multiple JSON files
        const { profile, social, music, projects, research } = this.data;
        
        // Update website metadata from profile.json
        if (profile?.website) {
            this.updateWebsiteMetadata(profile.website);
        }
        
        // Update contact info from profile.json
        if (profile?.contact && profile?.email) {
            this.updateContactInfo(profile.contact, profile.email);
        }
        
        // Update social links from social.json
        if (social?.socialMedia) {
            this.updateStructuredData(social.socialMedia, profile);
            this.updateSocialLinks(social.socialMedia);
        }
        
        // Update terminal with data access
        if (window.terminal && window.terminal.updateData) {
            window.terminal.updateData(this.data);
        }
    }

    updateWebsiteMetadata(website) {
        if (!website) return;
        
        try {
            // Update page title
            document.title = website.title;
            
            // Update meta tags
            const descMeta = document.querySelector('meta[name="description"]');
            if (descMeta) descMeta.content = website.description;
            
            const keywordsMeta = document.querySelector('meta[name="keywords"]');
            if (keywordsMeta) keywordsMeta.content = website.keywords;
            
            const authorMeta = document.querySelector('meta[name="author"]');
            if (authorMeta) authorMeta.content = website.author;
            
            // Update Open Graph tags
            const ogTitle = document.querySelector('meta[property="og:title"]');
            if (ogTitle) ogTitle.content = website.ogTitle;
            
            const ogDesc = document.querySelector('meta[property="og:description"]');
            if (ogDesc) ogDesc.content = website.ogDescription;
            
            const ogUrl = document.querySelector('meta[property="og:url"]');
            if (ogUrl) ogUrl.content = website.domain;
            
            const ogImage = document.querySelector('meta[property="og:image"]');
            if (ogImage && website.images?.ogImage) ogImage.content = website.images.ogImage;
            
            // Update Twitter tags
            const twitterTitle = document.querySelector('meta[property="twitter:title"]');
            if (twitterTitle) twitterTitle.content = website.ogTitle;
            
            const twitterDesc = document.querySelector('meta[property="twitter:description"]');
            if (twitterDesc) twitterDesc.content = website.ogDescription;
            
            const twitterUrl = document.querySelector('meta[property="twitter:url"]');
            if (twitterUrl) twitterUrl.content = website.domain;
            
            const twitterImage = document.querySelector('meta[property="twitter:image"]');
            if (twitterImage && website.images?.ogImage) twitterImage.content = website.images.ogImage;
            
            // Update canonical link
            const canonical = document.querySelector('link[rel="canonical"]');
            if (canonical) canonical.href = website.domain + '/';
            
            console.log('✅ Website metadata updated from profile.json');
        } catch (error) {
            console.error('Error updating website metadata:', error);
        }
    }

    updateContactInfo(contact, email) {
        if (!contact || !email) return;
        
        try {
            // Update email button functionality
            const emailButton = document.getElementById('email-button');
            if (emailButton) {
                // Remove existing event listeners
                const newEmailButton = emailButton.cloneNode(true);
                emailButton.parentNode.replaceChild(newEmailButton, emailButton);
                
                newEmailButton.addEventListener('click', () => {
                    newEmailButton.innerHTML = '📧 OPENING EMAIL CLIENT...';
                    window.location.href = `mailto:${email}?subject=${encodeURIComponent(contact.emailSubject)}&body=${encodeURIComponent(contact.emailBody)}`;
                    setTimeout(() => {
                        newEmailButton.innerHTML = '📧 SEND EMAIL';
                    }, 2000);
                });
            }
            
            // Update displayed contact info
            const allParagraphs = document.querySelectorAll('p');
            allParagraphs.forEach(p => {
                if (p.textContent.includes('thibault.twahirwa@gmail.com')) {
                    p.textContent = contact.displayText;
                }
                if (p.textContent.includes('📍 NYC')) {
                    p.textContent = contact.locationText;
                }
            });
            
            console.log('✅ Contact info updated from profile.json');
        } catch (error) {
            console.error('Error updating contact info:', error);
        }
    }

    updateStructuredData(socialMedia, profile) {
        const scriptTag = document.querySelector('script[type="application/ld+json"]');
        if (scriptTag && profile) {
            try {
                const structuredData = JSON.parse(scriptTag.textContent);
                
                // Update basic info from profile
                if (profile.name) structuredData.name = profile.name;
                if (profile.email) structuredData.email = profile.email;
                if (profile.website?.domain) structuredData.url = profile.website.domain;
                if (profile.website?.images?.profile) structuredData.image = profile.website.images.profile;
                
                // Update sameAs array with primary social links
                structuredData.sameAs = socialMedia
                    .filter(platform => platform.primary)
                    .map(platform => platform.url);
                
                scriptTag.textContent = JSON.stringify(structuredData, null, 2);
                console.log('✅ Structured data updated from profile.json and social.json');
            } catch (error) {
                console.error('Error updating structured data:', error);
            }
        }
    }

    updateSocialLinks(socialMedia) {
        // Create a map of platform to URL for easy lookup
        const platformUrls = {};
        socialMedia.forEach(platform => {
            platformUrls[platform.platform.toLowerCase()] = platform.url;
        });
        
        // Update all hardcoded social links
        const linkMappings = [
            { selector: 'a[href*="github.com/twahirwa"]', platform: 'github' },
            { selector: 'a[href*="linkedin.com/in/thibault-j-t"]', platform: 'linkedin' },
            { selector: 'a[href*="instagram.com/twahirwa"]', platform: 'instagram' },
            { selector: 'a[href*="youtube.com/@"]', platform: 'youtube' },
            { selector: 'a[href*="tiktok.com/@twahirwa"]', platform: 'tiktok' }
        ];
        
        linkMappings.forEach(mapping => {
            const elements = document.querySelectorAll(mapping.selector);
            if (platformUrls[mapping.platform]) {
                elements.forEach(element => {
                    element.href = platformUrls[mapping.platform];
                });
            }
        });
    }

    initializeLoadingScreen() {
        let progress = 0;
        const progressBar = document.getElementById('loading-progress');
        const loadingScreen = document.getElementById('loading-screen');
        
        if (!progressBar || !loadingScreen) {
            console.error('Loading elements not found');
            this.initDesktop();
            return;
        }
        
        const loadingInterval = setInterval(() => {
            progress += Math.random() * 20;
            if (progress >= 100) {
                progress = 100;
                clearInterval(loadingInterval);
                setTimeout(() => {
                    loadingScreen.classList.add('hidden');
                    this.initDesktop();
                }, 500);
            }
            progressBar.style.width = progress + '%';
        }, 100);
    }

    initDesktop() {
        try {
            this.matrixRain.init();
        } catch (e) {
            console.error('Matrix rain initialization error:', e);
        }
        
        Utils.updateClock();
        setInterval(Utils.updateClock, 1000);
        
        this.windowManager.init();
        this.terminal.init();
        
        document.querySelectorAll('.desktop-icon').forEach((icon) => {
            icon.addEventListener('click', () => {
                document.querySelectorAll('.desktop-icon').forEach((i) => { i.classList.remove('selected'); });
                icon.classList.add('selected');
                
                const windowId = icon.getAttribute('data-window');
                this.windowManager.openWindow(windowId);
            });
            
            icon.addEventListener('mouseenter', () => {
                const matrixCanvas = document.getElementById('matrix-rain');
                if (matrixCanvas) {
                    matrixCanvas.style.transition = 'opacity 0.3s';
                    matrixCanvas.style.opacity = '0.25';
                }
            });
            
            icon.addEventListener('mouseleave', () => {
                const matrixCanvas = document.getElementById('matrix-rain');
                if (matrixCanvas) {
                    matrixCanvas.style.opacity = '0.15';
                }
            });
        });
    }

    initTaskbar() {
        const startButton = document.getElementById('start-button');
        if (startButton) {
            startButton.addEventListener('click', Utils.toggleStartMenu);
        }
        
        document.querySelectorAll('.start-menu-item').forEach((item) => {
            item.addEventListener('click', () => {
                if (item.id === 'shutdown') {
                    Utils.shutdown();
                } else {
                    const windowId = item.getAttribute('data-window');
                    if (windowId) {
                        this.windowManager.openWindow(windowId);
                        Utils.toggleStartMenu();
                    }
                }
            });
        });
    }

    bindEvents() {
        document.addEventListener('keydown', (e) => {
            this.konamiCode.push(e.key);
            this.konamiCode.splice(-this.konamiSequence.length - 1, this.konamiCode.length - this.konamiSequence.length);
            
            if (JSON.stringify(this.konamiCode) === JSON.stringify(this.konamiSequence)) {
                Utils.activateKonamiMode();
            }
        });
        
        document.addEventListener('click', (e) => {
            if (!e.target.closest('#start-menu') && !e.target.closest('#start-button')) {
                const startMenu = document.getElementById('start-menu');
                if (startMenu) {
                    startMenu.classList.remove('active');
                }
            }
        });
        
        document.addEventListener('click', (e) => {
            if (e.target && e.target.id === 'email-button') {
                e.target.innerHTML = '📧 OPENING EMAIL CLIENT...';
                window.location.href = 'mailto:thibault.twahirwa@gmail.com?subject=Hello%20from%20your%20portfolio!&body=Hi%20Thibault,%0A%0AI%20found%20your%20portfolio%20and%20would%20love%20to%20connect!';
                setTimeout(() => {
                    e.target.innerHTML = '📧 SEND EMAIL';
                }, 2000);
            }
        });
        
        document.addEventListener('mouseover', (e) => {
            if (e.target && e.target.id === 'email-button') {
                e.target.style.transform = 'scale(1.05)';
                e.target.style.boxShadow = '0 0 20px rgba(0, 255, 255, 0.8)';
            }
        });
        
        document.addEventListener('mouseout', (e) => {
            if (e.target && e.target.id === 'email-button') {
                e.target.style.transform = 'scale(1)';
                e.target.style.boxShadow = 'none';
            }
        });
        
        window.addEventListener('error', Utils.handleGlobalError);
        
        window.addEventListener('resize', Utils.handleWindowResize);
    }
}

window.TwahirwaOS = TwahirwaOS;
